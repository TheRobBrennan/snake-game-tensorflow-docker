name: Semantic PR Check

on:
  pull_request:
    types: 
      - opened    # New PR
      - edited    # PR title/description edited
      - synchronize # New commits pushed

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  check-pr-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check PR Title Format
        id: check-title
        continue-on-error: true  # Allow the step to fail without failing the job
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Checking PR title: $PR_TITLE"
          
          # Check if title starts with valid type (including breaking change ! for any type)
          if [[ ! "$PR_TITLE" =~ ^(feat!|fix!|docs!|style!|refactor!|perf!|test!|build!|ci!|chore!|revert!|feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert): ]]; then
            echo "‚ùå PR title must start with one of these types, optionally followed by ! for breaking changes:"
            echo "feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
            echo "Example: feat: new feature"
            echo "Example: fix!: breaking bug fix"
            echo "See CONTRIBUTING.md for more details on commit message format."
            exit 1
          fi
          
          echo "‚úÖ PR title format is valid"

      - name: Verify Expected Behavior
        run: |
          # For invalid PR titles, we expect failure
          if [[ "${{ github.event.pull_request.title }}" == "adding some feature without proper format" ]]; then
            if [[ "${{ steps.check-title.outcome }}" == "failure" ]]; then
              echo "‚úÖ Test passed - Invalid PR title was rejected as expected"
              exit 0
            else
              echo "‚ùå Test failed - Invalid PR title should have been rejected"
              exit 1
            fi
          # For valid semantic PR titles, we expect success
          else
            if [[ "${{ steps.check-title.outcome }}" == "success" ]]; then
              echo "‚úÖ Test passed - Valid semantic PR title was accepted"
              exit 0
            else
              echo "‚ùå Test failed - Valid semantic PR title should have been accepted"
              exit 1
            fi
          fi

      - name: Wait for Vercel Preview
        # Skip this step when running locally with act (which sets GITHUB_ACTOR to nektos/act)
        if: ${{ github.actor != 'nektos/act' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Waiting for Vercel deployment to complete..."
          # Set timeout to 5 minutes (300 seconds)
          timeout=300
          start_time=$(date +%s)
          
          while [ $timeout -gt 0 ]; do
            # Debug output to see actual states
            gh pr checks ${{ github.event.pull_request.number }} --json name,state,description | jq -r '.[] | select(.name | contains("Vercel"))'
            
            # Look for both 'Vercel' and 'vercel' in check names (case insensitive)
            STATUS=$(gh pr checks ${{ github.event.pull_request.number }} --json name,state,description | jq -r '.[] | select(.name | ascii_downcase | contains("vercel")) | .description')
            STATE=$(gh pr checks ${{ github.event.pull_request.number }} --json name,state,description | jq -r '.[] | select(.name | ascii_downcase | contains("vercel")) | .state')
            
            if [[ "$STATUS" == *"Deployment has completed"* || "$STATE" == "SUCCESS" ]]; then
              echo "‚úÖ Vercel deployment completed successfully"
              # Get the deployment URL
              DEPLOYMENT_URL=$(gh pr view ${{ github.event.pull_request.number }} --json comments --jq '.comments[].body' | grep -o 'https://.*vercel.app' | head -n 1)
              if [[ ! -z "$DEPLOYMENT_URL" ]]; then
                echo "üîó Preview URL: $DEPLOYMENT_URL"
                # Add a comment with the preview URL if it doesn't exist yet
                if ! gh pr view ${{ github.event.pull_request.number }} --json comments --jq '.comments[].body' | grep -q "Preview URL"; then
                  gh pr comment ${{ github.event.pull_request.number }} --body "## Vercel Deployment\n\n‚úÖ Successfully deployed to Vercel!\n\nüîó **Preview URL**: [$DEPLOYMENT_URL]($DEPLOYMENT_URL)"
                fi
              fi
              break
            elif [[ "$STATUS" == *"failed"* || "$STATE" == "FAILURE" ]]; then
              echo "‚ùå Vercel deployment failed"
              gh pr comment ${{ github.event.pull_request.number }} --body "## Vercel Deployment\n\n‚ùå Deployment to Vercel failed. Please check the Vercel logs for more information."
              exit 1
            fi
            
            # Calculate remaining time
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            timeout=$((300 - elapsed))
            
            if [ $timeout -le 0 ]; then
              echo "‚è±Ô∏è Timeout waiting for Vercel deployment after 5 minutes"
              gh pr comment ${{ github.event.pull_request.number }} --body "## Vercel Deployment\n\n‚è±Ô∏è Timed out waiting for Vercel deployment after 5 minutes. The deployment might still be in progress."
              exit 1
            fi
            
            echo "‚è≥ Waiting for Vercel deployment... ($timeout seconds remaining)"
            sleep 10
          done

      - name: Check Breaking Change Format
        if: success()
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check for breaking change indicator
          if [[ "$PR_TITLE" =~ ^feat!: ]]; then
            echo "‚ö†Ô∏è Breaking change detected in PR title"
            echo "This will trigger a major version bump"
          fi 